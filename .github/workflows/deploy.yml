name: Build & Deploy EQ Microservices

concurrency:
  group: eq-microservices-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    name: Detect Changed Microservices
    runs-on: ubuntu-latest
    outputs:
      any: ${{ steps.filter.outputs.any_changed }}
      services: ${{ steps.list.outputs.services }}    # <-- da filter → list

    steps:
      - uses: actions/checkout@v4

      - name: Filter changed services
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            registry: 'registry/**'
            gateway: 'gateway/**'
            eurekaserver: 'eurekaserver/**'
            calendar: 'calendar/**'
            document: 'document/**'
            frontend: 'frontend/**'
            any_changed:
              - 'registry/**'
              - 'gateway/**'
              - 'eurekaserver/**'
              - 'calendar/**'
              - 'document/**'
              - 'frontend/**'

      - name: Build JSON array of changed services
        if: steps.filter.outputs.any_changed == 'true'
        id: list
        run: |
          SERVICES_JSON=$(jq -n \
            --arg r "${{ steps.filter.outputs.registry }}" \
            --arg g "${{ steps.filter.outputs.gateway }}" \
            --arg e "${{ steps.filter.outputs.eurekaserver }}" \
            --arg c "${{ steps.filter.outputs.calendar }}" \
            --arg d "${{ steps.filter.outputs.document }}" \
            --arg f "${{ steps.filter.outputs.frontend }}" \
            '[
              ($r == "true") ? ["registry"] : [],
              ($g == "true") ? ["gateway"] : [],
              ($e == "true") ? ["eurekaserver"] : [],
              ($c == "true") ? ["calendar"] : [],
              ($d == "true") ? ["document"] : [],
              ($f == "true") ? ["frontend"] : []
            ] | add')
          echo "::set-output name=services::$SERVICES_JSON"

  build-and-push:
    name: Build and Push Docker Images
    needs: detect-changes
    if: needs.detect-changes.outputs.any == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}  # <-- JSON array → matrix

    env:
      IMAGE_REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}
      TAG_SHA: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v2
        name: Set up QEMU

      - uses: docker/setup-buildx-action@v3
        name: Set up Docker Buildx

      - uses: actions/cache@v3
        name: Cache Docker layers
        with:
          path: /tmp/.buildx-cache-${{ matrix.service }}
          key: buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ matrix.service }}-

      - uses: docker/login-action@v2
        name: Login to Docker Hub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push ${{ matrix.service }}
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache-${{ matrix.service }} \
            --cache-to=type=local,dest=/tmp/.buildx-cache-${{ matrix.service }},mode=max \
            --platform linux/amd64,linux/arm64 \
            -t $IMAGE_REGISTRY/eq-${{ matrix.service }}:latest \
            -t $IMAGE_REGISTRY/eq-${{ matrix.service }}:${TAG_SHA} \
            -f ./${{ matrix.service }}/Dockerfile \
            ./${{ matrix.service }} \
            --push

  deploy:
    name: SSH Deploy on Production Server
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: appleboy/ssh-action@v0.1.7
        name: Deploy via SSH
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/manager/eq
            docker compose pull
            docker compose up -d
        retry: 2
        retry-delay-seconds: 15
