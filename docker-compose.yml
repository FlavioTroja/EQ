services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot      
    restart: unless-stopped
    command: /bin/sh -c "while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'"  
    networks:
      - eq_net   

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped
    entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;" 
    depends_on:
      - nginx 
    networks:
      - eq_net  

  eurekaserver:
    build:
      context: ./eurekaserver
      dockerfile: Dockerfile
    image: eurekaserver:latest
    container_name: eurekaserver
    restart: always
    ports:
      - "8761:8761"
    environment:
      EUREKA_CLIENT_REGISTER-WITH-EUREKA: false
      EUREKA_CLIENT_FETCH-REGISTRY: false  
    networks:
      - eq_net

  gatewaydb:
    image: postgres
    container_name: gatewaydb
    restart: always
    shm_size: 128mb
    ports:
      - "5465:5432"
    volumes:
      - gatewaydb:/data/postgres  
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
      POSTGRES_DB: gateway
    networks:
      - eq_net

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    image: gateway:latest
    container_name: gateway
    restart: always
    ports:
      - "8765:8765"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://gatewaydb:5432/  
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_PROFILES_ACTIVE: dev
      EUREKA_URI: http://eurekaserver:8761/eureka
      KEYCLOAK_URI: http://keycloak:8080
    depends_on:
      eurekaserver:
        condition: service_started
      gatewaydb:
        condition: service_started
    networks:
      - eq_net

  keycloakdb:
    image: postgres
    container_name: keycloakdb
    restart: always
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - keycloakdb:/var/lib/postgresql/data
    networks:
      - eq_net

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    restart: always
    ports:
      - "5050:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloakdb:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_DB_SCHEMA: public
      KC_PROXY: edge
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: secr3t
    command: start --http-port=8080 --hostname=radpro.it --hostname-strict=false --hostname-strict-https=false --optimized
    depends_on:
      - keycloakdb
    networks:
      - eq_net

  registrydb:
    image: mongo
    container_name: registrydb
    restart: always
    logging:
      options:
        max-size: 200m
    ports:
      - "5480:27017"
    volumes:
      - registrydb:/data/db  
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secr3t
      MONGO_INITDB_DATABASE: registry
    networks:
      - eq_net  

  registry:
    build:
      context: ./registry
      dockerfile: Dockerfile
    image: registry:latest
    container_name: registry
    restart: always
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATA_MONGODB_HOST: registrydb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_USERNAME: admin
      SPRING_DATA_MONGODB_PASSWORD: secr3t
      SPRING_DATA_MONGODB_DATABASE: registry
      EUREKA_URI: http://eurekaserver:8761/eureka
      KEYCLOAK_URI: http://keycloak:8080
    depends_on:
      eurekaserver:
        condition: service_started
      registrydb:
        condition: service_started
    networks:
      - eq_net    

  calendardb:
    image: postgres
    container_name: calendardb
    restart: always
    shm_size: 128mb
    ports:
      - "5481:5432"
    volumes:
      - calendardb:/data/postgres  
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
      POSTGRES_DB: calendar
    networks:
      - eq_net

  calendar:
    build:
      context: ./calendar
      dockerfile: Dockerfile
    image: calendar:latest
    container_name: calendar
    restart: always
    ports:
      - "8081:8081"
    environment:
      RDS_HOSTNAME: calendardb
      RDS_USERNAME: postgres
      RDS_PASSWORD: postgres
      RDS_PORT: 5432
      SPRING_PROFILES_ACTIVE: dev
      EUREKA_URI: http://eurekaserver:8761/eureka
    depends_on:
      eurekaserver:
        condition: service_started
      calendardb:
        condition: service_started
    networks:
      - eq_net

  document:
    build:
      context: ./document
      dockerfile: Dockerfile
    image: document:latest
    container_name: document
    restart: always
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      EUREKA_URI: http://eurekaserver:8761/eureka
    depends_on:
      eurekaserver:
        condition: service_started
    networks:
      - eq_net    

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend:latest
    container_name: frontend
    restart: always
    ports:
      - "4200:80"
    depends_on:
      - gateway
    networks:
      - eq_net

networks:
  eq_net:
    driver: bridge

volumes:
  gatewaydb:
  registrydb:
  calendardb:
  keycloakdb:
